name: Provision autonomis
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      TF_LOG: INFO
      CLUSTER_NAME: autoletics-eks
      HELM_RELEASE: autonomis
      CLIENT_NAME: jaiditya
    steps:
      - uses: actions/checkout@v4

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.SECRET_KEY}}
          role-session-name: ci-run-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: autoletics-bucket-eks
          AWS_BUCKET_KEY_NAME: state/terraform-${{env.CLIENT_NAME}}.tfstate
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      - name: Terraform Apply with Output Capture (API Server Endpoint)
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          output_value=$(terraform apply -auto-approve -input=false -no-color | grep "github_action_role" | awk '{print $NF}')
          export GITHUB_ACTIONS_ROLE_ARN="$output_value"

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.GITHUB_ACTIONS_ROLE_ARN}}
          role-session-name: ci-run-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Autonomis Helm Chart
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
        with:
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          name: ${{env.HELM_RELEASE}}
          chart-path: charts/autonomis-charts
          namespace: autonomis

      - name: Configure Kubernetes client
        uses: silverlyra/setup-aws-eks@v0.1.1
        with:
          cluster: ${{ env.CLUSTER_NAME }}

      - name: Deploy argocd
        run: |
          kubectl create namespace argocd
          kubectl apply -f argo/argocd.yml -n argocd
          kubectl apply -f argo/argo-app.yml -n argocd

      # - name: Install Airbyte Helm Chart
      #   uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
      #   with:
      #     aws-region: ${{ env.AWS_REGION }}
      #     cluster-name: ${{ env.CLUSTER_NAME }}
      #     name: airbyte
      #     chart-path: https://airbytehq.github.io/helm-charts

      # - name: Install Prometheus Helm Chart
      #   uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
      #   with:
      #     aws-region: ${{ env.AWS_REGION }}
      #     cluster-name: ${{ env.CLUSTER_NAME }}
      #     name: prometheus
      #     chart-path: https://prometheus-community.github.io/helm-charts/kube-prometheus-stack
