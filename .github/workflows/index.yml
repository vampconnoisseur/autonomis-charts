name: Provision autonomis
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      TF_LOG: INFO
      CLUSTER_NAME: autoletics-eks
      HELM_RELEASE: autonomis
      CLIENT_NAME: jaiditya
    steps:
      - uses: actions/checkout@v4

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.SECRET_KEY}}
          role-session-name: ci-run-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3.1.1

      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true

      # - name: Terraform Init
      #   id: init
      #   env:
      #     AWS_BUCKET_NAME: autoletics-bucket-eks
      #     AWS_BUCKET_KEY_NAME: state/terraform-${{env.CLIENT_NAME}}.tfstate
      #   run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -no-color
      #   if: github.event_name == 'pull_request'
      #   continue-on-error: true

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply with Output Capture (API Server Endpoint)
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: |
      #     output_value=$(terraform apply -auto-approve -input=false -no-color | grep "API_Server_Endpoint" | awk '{print $NF}')
      #     export API_SERVER_ENDPOINT="$output_value"

      - name: Install Autonomis Helm Chart
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
        with:
          aws-access-key-id: ${{secrets.ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.SECRET_KEY}}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          name: ${{env.HELM_RELEASE}}
          values: api_server=${{env.API_SERVER_ENDPOINT}}
          chart-path: charts/autonomis-charts

      # - name: Install Airbyte Helm Chart
      #   uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
      #   with:
      #     aws-region: ${{ env.AWS_REGION }}
      #     cluster-name: ${{ env.CLUSTER_NAME }}
      #     name: airbyte
      #     chart-path: https://airbytehq.github.io/helm-charts

      # - name: Install Prometheus Helm Chart
      #   uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
      #   with:
      #     aws-region: ${{ env.AWS_REGION }}
      #     cluster-name: ${{ env.CLUSTER_NAME }}
      #     name: prometheus
      #     chart-path: https://prometheus-community.github.io/helm-charts/kube-prometheus-stack
